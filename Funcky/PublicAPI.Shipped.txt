#nullable enable

~Funcky.GenericConstraints.RequireClass<T>
Funcky.ConstantDelayPolicy
Funcky.ConstantDelayPolicy.ConstantDelayPolicy(int maxRetry, System.TimeSpan delay) -> void
Funcky.ConstantDelayPolicy.Duration(int onRetryCount) -> System.TimeSpan
Funcky.ConstantDelayPolicy.MaxRetries.get -> int
Funcky.DoNotRetryPolicy
Funcky.DoNotRetryPolicy.DoNotRetryPolicy() -> void
Funcky.DoNotRetryPolicy.Duration(int onRetryCount) -> System.TimeSpan
Funcky.DoNotRetryPolicy.MaxRetries.get -> int
Funcky.ExponentialBackoffRetryPolicy
Funcky.ExponentialBackoffRetryPolicy.Duration(int onRetryCount) -> System.TimeSpan
Funcky.ExponentialBackoffRetryPolicy.ExponentialBackoffRetryPolicy(int maxRetry, System.TimeSpan firstDelay) -> void
Funcky.ExponentialBackoffRetryPolicy.MaxRetries.get -> int
Funcky.Extensions.AsyncEnumerableExtensions
Funcky.Extensions.DictionaryExtensions
Funcky.Extensions.EnumerableExtensions
Funcky.Extensions.HttpHeadersExtensions
Funcky.Extensions.ObjectExtensions
Funcky.Extensions.ParseExtensions
Funcky.Extensions.QueryableExtensions
Funcky.Extensions.StreamExtensions
Funcky.Extensions.StringExtensions
Funcky.Extensions.ValueWithFirst<TValue>
Funcky.Extensions.ValueWithFirst<TValue>.Deconstruct(out TValue value, out bool isFirst) -> void
Funcky.Extensions.ValueWithFirst<TValue>.IsFirst.get -> bool
Funcky.Extensions.ValueWithFirst<TValue>.Value.get -> TValue
Funcky.Extensions.ValueWithFirst<TValue>.ValueWithFirst(TValue value, bool isFirst) -> void
Funcky.Extensions.ValueWithIndex<TValue>
Funcky.Extensions.ValueWithIndex<TValue>.Deconstruct(out TValue value, out int index) -> void
Funcky.Extensions.ValueWithIndex<TValue>.Index.get -> int
Funcky.Extensions.ValueWithIndex<TValue>.Value.get -> TValue
Funcky.Extensions.ValueWithIndex<TValue>.ValueWithIndex(TValue value, int index) -> void
Funcky.Extensions.ValueWithLast<TValue>
Funcky.Extensions.ValueWithLast<TValue>.Deconstruct(out TValue value, out bool isLast) -> void
Funcky.Extensions.ValueWithLast<TValue>.IsLast.get -> bool
Funcky.Extensions.ValueWithLast<TValue>.Value.get -> TValue
Funcky.Extensions.ValueWithLast<TValue>.ValueWithLast(TValue value, bool isLast) -> void
Funcky.Functional
Funcky.GenericConstraints.RequireClass<T>.RequireClass() -> void
Funcky.GenericConstraints.RequireStruct<T>
Funcky.GenericConstraints.RequireStruct<T>.RequireStruct() -> void
Funcky.IRetryPolicy
Funcky.IRetryPolicy.Duration(int onRetryCount) -> System.TimeSpan
Funcky.IRetryPolicy.MaxRetries.get -> int
Funcky.LinearBackoffRetryPolicy
Funcky.LinearBackoffRetryPolicy.Duration(int onRetryCount) -> System.TimeSpan
Funcky.LinearBackoffRetryPolicy.LinearBackoffRetryPolicy(int maxRetry, System.TimeSpan firstDelay) -> void
Funcky.LinearBackoffRetryPolicy.MaxRetries.get -> int
Funcky.Monads.AwaitableOptionExtensions
Funcky.Monads.Either<TLeft, TRight>
Funcky.Monads.Either<TLeft, TRight>.Equals(Funcky.Monads.Either<TLeft, TRight> other) -> bool
Funcky.Monads.Either<TLeft, TRight>.Match<TMatchResult>(System.Func<TLeft, TMatchResult>! left, System.Func<TRight, TMatchResult>! right) -> TMatchResult
Funcky.Monads.Either<TLeft, TRight>.Select<TResult>(System.Func<TRight, TResult>! selector) -> Funcky.Monads.Either<TLeft, TResult>
Funcky.Monads.Either<TLeft, TRight>.SelectMany<TEither, TResult>(System.Func<TRight, Funcky.Monads.Either<TLeft, TEither>>! eitherSelector, System.Func<TRight, TEither, TResult>! resultSelector) -> Funcky.Monads.Either<TLeft, TResult>
Funcky.Monads.LazyExtensions
Funcky.Monads.Option
Funcky.Monads.Option<TItem>
Funcky.Monads.Option<TItem>.AndThen(System.Action<TItem>! andThenFunction) -> void
Funcky.Monads.Option<TItem>.AndThen<TResult>(System.Func<TItem, Funcky.Monads.Option<TResult>>! andThenFunction) -> Funcky.Monads.Option<TResult>
Funcky.Monads.Option<TItem>.AndThen<TResult>(System.Func<TItem, TResult>! andThenFunction) -> Funcky.Monads.Option<TResult>
Funcky.Monads.Option<TItem>.CompareTo(Funcky.Monads.Option<TItem> other) -> int
Funcky.Monads.Option<TItem>.CompareTo(object? obj) -> int
Funcky.Monads.Option<TItem>.Equals(Funcky.Monads.Option<TItem> other) -> bool
Funcky.Monads.Option<TItem>.GetOrElse(System.Func<TItem>! elseOption) -> TItem
Funcky.Monads.Option<TItem>.GetOrElse(TItem elseOption) -> TItem
Funcky.Monads.Option<TItem>.Inspect(System.Action<TItem>! action) -> Funcky.Monads.Option<TItem>
Funcky.Monads.Option<TItem>.Match(System.Action! none, System.Action<TItem>! some) -> void
Funcky.Monads.Option<TItem>.Match<TResult>(System.Func<TResult>! none, System.Func<TItem, TResult>! some) -> TResult
Funcky.Monads.Option<TItem>.Match<TResult>(TResult none, System.Func<TItem, TResult>! some) -> TResult
Funcky.Monads.Option<TItem>.OrElse(Funcky.Monads.Option<TItem> elseOption) -> Funcky.Monads.Option<TItem>
Funcky.Monads.Option<TItem>.OrElse(System.Func<Funcky.Monads.Option<TItem>>! elseOption) -> Funcky.Monads.Option<TItem>
Funcky.Monads.Option<TItem>.Select<TResult>(System.Func<TItem, TResult>! selector) -> Funcky.Monads.Option<TResult>
Funcky.Monads.Option<TItem>.SelectMany<TMaybe, TResult>(System.Func<TItem, Funcky.Monads.Option<TMaybe>>! maybeSelector, System.Func<TItem, TMaybe, TResult>! resultSelector) -> Funcky.Monads.Option<TResult>
Funcky.Monads.Option<TItem>.SelectMany<TResult>(System.Func<TItem, Funcky.Monads.Option<TResult>>! selector) -> Funcky.Monads.Option<TResult>
Funcky.Monads.Option<TItem>.ToEnumerable() -> System.Collections.Generic.IEnumerable<TItem>!
Funcky.Monads.Option<TItem>.Where(System.Func<TItem, bool>! predicate) -> Funcky.Monads.Option<TItem>
Funcky.Monads.OptionComparer
Funcky.Monads.OptionComparer<TItem>
Funcky.Monads.OptionTaskAwaiter<TItem>
Funcky.Monads.OptionTaskAwaiter<TItem>.GetResult() -> Funcky.Monads.Option<TItem>
Funcky.Monads.OptionTaskAwaiter<TItem>.IsCompleted.get -> bool
Funcky.Monads.OptionTaskAwaiter<TItem>.OnCompleted(System.Action! continuation) -> void
Funcky.Monads.OptionValueTaskAwaiter<TItem>
Funcky.Monads.OptionValueTaskAwaiter<TItem>.GetResult() -> Funcky.Monads.Option<TItem>
Funcky.Monads.OptionValueTaskAwaiter<TItem>.IsCompleted.get -> bool
Funcky.Monads.OptionValueTaskAwaiter<TItem>.OnCompleted(System.Action! continuation) -> void
Funcky.Monads.Result
Funcky.Monads.Result<TValidResult>
Funcky.Monads.Result<TValidResult>.Equals(Funcky.Monads.Result<TValidResult> other) -> bool
Funcky.Monads.Result<TValidResult>.Match(System.Action<TValidResult>! ok, System.Action<System.Exception!>! error) -> void
Funcky.Monads.Result<TValidResult>.Match<TMatchResult>(System.Func<TValidResult, TMatchResult>! ok, System.Func<System.Exception!, TMatchResult>! error) -> TMatchResult
Funcky.Monads.Result<TValidResult>.Select<TResult>(System.Func<TValidResult, TResult>! selector) -> Funcky.Monads.Result<TResult>
Funcky.Monads.Result<TValidResult>.SelectMany<TSelectedResult, TResult>(System.Func<TValidResult, Funcky.Monads.Result<TSelectedResult>>! selectedResultSelector, System.Func<TValidResult, TSelectedResult, TResult>! resultSelector) -> Funcky.Monads.Result<TResult>
Funcky.NoDelayRetryPolicy
Funcky.NoDelayRetryPolicy.NoDelayRetryPolicy(int maxRetry) -> void
Funcky.Sequence
Funcky.Unit
Funcky.Unit.CompareTo(Funcky.Unit other) -> int
Funcky.Unit.Equals(Funcky.Unit other) -> bool
Funcky.Unit.Unit() -> void
override Funcky.Monads.Either<TLeft, TRight>.Equals(object? obj) -> bool
override Funcky.Monads.Either<TLeft, TRight>.GetHashCode() -> int
override Funcky.Monads.Option<TItem>.Equals(object? obj) -> bool
override Funcky.Monads.Option<TItem>.GetHashCode() -> int
override Funcky.Monads.Option<TItem>.ToString() -> string!
override Funcky.Monads.Result<TValidResult>.Equals(object? obj) -> bool
override Funcky.Monads.Result<TValidResult>.GetHashCode() -> int
override Funcky.Unit.Equals(object? obj) -> bool
override Funcky.Unit.GetHashCode() -> int
static Funcky.Extensions.AsyncEnumerableExtensions.ElementAtOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.Pairwise<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Extensions.AsyncEnumerableExtensions.Pairwise<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource Front, TSource Back)>!
static Funcky.Extensions.AsyncEnumerableExtensions.PairwiseInternal<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerator<TResult>!
static Funcky.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Extensions.AsyncEnumerableExtensions.TakeEvery<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int interval) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Extensions.AsyncEnumerableExtensions.WhereSelect<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TOutput>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Extensions.AsyncEnumerableExtensions.WhereSelectAwait<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Extensions.AsyncEnumerableExtensions.WhereSelectAwaitWithCancellation<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Extensions.DictionaryExtensions.TryGetValue<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! dictionary, TKey key) -> Funcky.Monads.Option<TValue>
static Funcky.Extensions.DictionaryExtensions.TryGetValue<TKey, TValue>(this System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! dictionary, TKey readOnlyKey) -> Funcky.Monads.Option<TValue>
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Func<TKey, System.Collections.Immutable.IImmutableList<TElement>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static Funcky.Extensions.EnumerableExtensions.AdjacentGroupBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<decimal>! source) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<double>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<float>! source) -> Funcky.Monads.Option<float>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<decimal>>! source) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<double>>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<float>>! source) -> Funcky.Monads.Option<float>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<int>>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<long>>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<int>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone(this System.Collections.Generic.IEnumerable<long>! source) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, decimal>! selector) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, double>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, float>! selector) -> Funcky.Monads.Option<float>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<decimal>>! selector) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<double>>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<float>>! selector) -> Funcky.Monads.Option<float>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<int>>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<long>>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, int>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.AverageOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, long>! selector) -> Funcky.Monads.Option<double>
static Funcky.Extensions.EnumerableExtensions.CartesianProduct<TFirstSource, TSecondSource, TResult>(this System.Collections.Generic.IEnumerable<TFirstSource>! firstSequence, System.Collections.Generic.IEnumerable<TSecondSource>! secondSequence, System.Func<TFirstSource, TSecondSource, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.CartesianProduct<TFirstSource, TSecondSource>(this System.Collections.Generic.IEnumerable<TFirstSource>! firstSequence, System.Collections.Generic.IEnumerable<TSecondSource>! secondSequence) -> System.Collections.Generic.IEnumerable<(TFirstSource First, TSecondSource Second)>!
static Funcky.Extensions.EnumerableExtensions.Chunk<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.Chunk<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static Funcky.Extensions.EnumerableExtensions.ElementAtOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int index) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.FirstOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.FirstOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.ForEach<T>(this System.Collections.Generic.IEnumerable<T>! elements, System.Action<T>! action) -> void
static Funcky.Extensions.EnumerableExtensions.Inspect<T>(this System.Collections.Generic.IEnumerable<T>! elements, System.Action<T>! action) -> System.Collections.Generic.IEnumerable<T>!
static Funcky.Extensions.EnumerableExtensions.Interleave<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.Interleave<TSource>(this System.Collections.Generic.IEnumerable<TSource>! sequence, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.LastOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.LastOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.MaxOrNone<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TResult>>! selector) -> Funcky.Monads.Option<TResult>
static Funcky.Extensions.EnumerableExtensions.MaxOrNone<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> Funcky.Monads.Option<TResult>
static Funcky.Extensions.EnumerableExtensions.MaxOrNone<TSource>(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<TSource>>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.MaxOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! sources, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! sequence1, System.Collections.Generic.IEnumerable<TSource>! sequence2, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! sequence1, System.Collections.Generic.IEnumerable<TSource>! sequence2, System.Collections.Generic.IEnumerable<TSource>! sequence3, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.Merge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! sequence1, System.Collections.Generic.IEnumerable<TSource>! sequence2, System.Collections.Generic.IEnumerable<TSource>! sequence3, System.Collections.Generic.IEnumerable<TSource>! sequence4, Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!> comparer = default(Funcky.Monads.Option<System.Collections.Generic.IComparer<TSource>!>)) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.MinOrNone<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TResult>>! selector) -> Funcky.Monads.Option<TResult>
static Funcky.Extensions.EnumerableExtensions.MinOrNone<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> Funcky.Monads.Option<TResult>
static Funcky.Extensions.EnumerableExtensions.MinOrNone<TSource>(this System.Collections.Generic.IEnumerable<Funcky.Monads.Option<TSource>>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.MinOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.None<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> bool
static Funcky.Extensions.EnumerableExtensions.None<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> bool
static Funcky.Extensions.EnumerableExtensions.Pairwise<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static Funcky.Extensions.EnumerableExtensions.Pairwise<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource Front, TSource Back)>!
static Funcky.Extensions.EnumerableExtensions.Partition<TItem, TResult>(this System.Collections.Generic.IEnumerable<TItem>! source, System.Func<TItem, bool>! predicate, System.Func<System.Collections.Generic.IEnumerable<TItem>!, System.Collections.Generic.IEnumerable<TItem>!, TResult>! resultSelector) -> TResult
static Funcky.Extensions.EnumerableExtensions.Partition<TItem>(this System.Collections.Generic.IEnumerable<TItem>! source, System.Func<TItem, bool>! predicate) -> (System.Collections.Generic.IEnumerable<TItem>! True, System.Collections.Generic.IEnumerable<TItem>! False)
static Funcky.Extensions.EnumerableExtensions.SingleOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.SingleOrNone<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.EnumerableExtensions.SlidingWindow<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static Funcky.Extensions.EnumerableExtensions.TakeEvery<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int interval) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.Transpose<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! source) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static Funcky.Extensions.EnumerableExtensions.WhereNotNull<TSource>(this System.Collections.Generic.IEnumerable<TSource?>! source) -> System.Collections.Generic.IEnumerable<TSource!>!
static Funcky.Extensions.EnumerableExtensions.WhereNotNull<TSource>(this System.Collections.Generic.IEnumerable<TSource?>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static Funcky.Extensions.EnumerableExtensions.WhereSelect<TInput, TOutput>(this System.Collections.Generic.IEnumerable<TInput>! inputs, System.Func<TInput, Funcky.Monads.Option<TOutput>>! selector) -> System.Collections.Generic.IEnumerable<TOutput>!
static Funcky.Extensions.EnumerableExtensions.WithFirst<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<Funcky.Extensions.ValueWithFirst<TSource>>!
static Funcky.Extensions.EnumerableExtensions.WithIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<Funcky.Extensions.ValueWithIndex<TSource>>!
static Funcky.Extensions.EnumerableExtensions.WithLast<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<Funcky.Extensions.ValueWithLast<TSource>>!
static Funcky.Extensions.HttpHeadersExtensions.TryGetValues(this System.Net.Http.Headers.HttpHeaders! headers, string! name) -> Funcky.Monads.Option<System.Collections.Generic.IEnumerable<string!>!>
static Funcky.Extensions.ObjectExtensions.ToEnumerable<T>(this T item, Funcky.GenericConstraints.RequireStruct<T>? ω = null) -> System.Collections.Generic.IEnumerable<T>!
static Funcky.Extensions.ObjectExtensions.ToEnumerable<T>(this T? item) -> System.Collections.Generic.IEnumerable<T>!
static Funcky.Extensions.ObjectExtensions.ToEnumerable<T>(this T? item, Funcky.GenericConstraints.RequireClass<T!>? ω = null) -> System.Collections.Generic.IEnumerable<T!>!
static Funcky.Extensions.ParseExtensions.TryParseBoolean(this string! candidate) -> Funcky.Monads.Option<bool>
static Funcky.Extensions.ParseExtensions.TryParseByte(this string! candidate) -> Funcky.Monads.Option<byte>
static Funcky.Extensions.ParseExtensions.TryParseByte(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<byte>
static Funcky.Extensions.ParseExtensions.TryParseDateTime(this string! candidate) -> Funcky.Monads.Option<System.DateTime>
static Funcky.Extensions.ParseExtensions.TryParseDateTime(this string! candidate, System.IFormatProvider! provider, System.Globalization.DateTimeStyles styles) -> Funcky.Monads.Option<System.DateTime>
static Funcky.Extensions.ParseExtensions.TryParseDecimal(this string! candidate) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.ParseExtensions.TryParseDecimal(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<decimal>
static Funcky.Extensions.ParseExtensions.TryParseDouble(this string! candidate) -> Funcky.Monads.Option<double>
static Funcky.Extensions.ParseExtensions.TryParseDouble(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<double>
static Funcky.Extensions.ParseExtensions.TryParseEnum<TEnum>(this string! candidate) -> Funcky.Monads.Option<TEnum>
static Funcky.Extensions.ParseExtensions.TryParseEnum<TEnum>(this string! candidate, bool ignoreCase) -> Funcky.Monads.Option<TEnum>
static Funcky.Extensions.ParseExtensions.TryParseInt(this string! candidate) -> Funcky.Monads.Option<int>
static Funcky.Extensions.ParseExtensions.TryParseInt(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<int>
static Funcky.Extensions.ParseExtensions.TryParseLong(this string! candidate) -> Funcky.Monads.Option<long>
static Funcky.Extensions.ParseExtensions.TryParseLong(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<long>
static Funcky.Extensions.ParseExtensions.TryParseShort(this string! candidate) -> Funcky.Monads.Option<short>
static Funcky.Extensions.ParseExtensions.TryParseShort(this string! candidate, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Funcky.Monads.Option<short>
static Funcky.Extensions.ParseExtensions.TryParseTimeSpan(this string! candidate) -> Funcky.Monads.Option<System.TimeSpan>
static Funcky.Extensions.ParseExtensions.TryParseTimeSpan(this string! candidate, System.IFormatProvider! provider) -> Funcky.Monads.Option<System.TimeSpan>
static Funcky.Extensions.QueryableExtensions.FirstOrNone<TSource>(this System.Linq.IQueryable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.QueryableExtensions.FirstOrNone<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.QueryableExtensions.LastOrNone<TSource>(this System.Linq.IQueryable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.QueryableExtensions.LastOrNone<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.QueryableExtensions.SingleOrNone<TSource>(this System.Linq.IQueryable<TSource>! source) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.QueryableExtensions.SingleOrNone<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> Funcky.Monads.Option<TSource>
static Funcky.Extensions.StreamExtensions.GetLengthOrNone(this System.IO.Stream! stream) -> Funcky.Monads.Option<long>
static Funcky.Extensions.StreamExtensions.GetPositionOrNone(this System.IO.Stream! stream) -> Funcky.Monads.Option<long>
static Funcky.Extensions.StreamExtensions.GetReadTimeoutOrNone(this System.IO.Stream! stream) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StreamExtensions.GetWriteTimeoutOrNone(this System.IO.Stream! stream) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfAnyOrNone(this string! haystack, char[]! anyOf) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfAnyOrNone(this string! haystack, char[]! anyOf, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfAnyOrNone(this string! haystack, char[]! anyOf, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, char value) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, char value, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, char value, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, char value, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value, int startIndex, int count, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value, int startIndex, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.IndexOfOrNone(this string! haystack, string! value, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfAnyOrNone(this string! haystack, char[]! anyOf) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfAnyOrNone(this string! haystack, char[]! anyOf, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfAnyOrNone(this string! haystack, char[]! anyOf, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, char value) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, char value, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, char value, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value, int startIndex) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value, int startIndex, int count) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value, int startIndex, int count, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value, int startIndex, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Extensions.StringExtensions.LastIndexOfOrNone(this string! haystack, string! value, System.StringComparison comparisonType) -> Funcky.Monads.Option<int>
static Funcky.Functional.ActionToUnit(System.Action! action) -> System.Func<Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T>(System.Action<T>! action) -> System.Func<T, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3, T4, T5, T6, T7, T8>(System.Action<T1, T2, T3, T4, T5, T6, T7, T8>! action) -> System.Func<T1, T2, T3, T4, T5, T6, T7, T8, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3, T4, T5, T6, T7>(System.Action<T1, T2, T3, T4, T5, T6, T7>! action) -> System.Func<T1, T2, T3, T4, T5, T6, T7, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3, T4, T5, T6>(System.Action<T1, T2, T3, T4, T5, T6>! action) -> System.Func<T1, T2, T3, T4, T5, T6, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3, T4, T5>(System.Action<T1, T2, T3, T4, T5>! action) -> System.Func<T1, T2, T3, T4, T5, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3, T4>(System.Action<T1, T2, T3, T4>! action) -> System.Func<T1, T2, T3, T4, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2, T3>(System.Action<T1, T2, T3>! action) -> System.Func<T1, T2, T3, Funcky.Unit>!
static Funcky.Functional.ActionToUnit<T1, T2>(System.Action<T1, T2>! action) -> System.Func<T1, T2, Funcky.Unit>!
static Funcky.Functional.All<T>(params System.Func<T, bool>![]! predicates) -> System.Func<T, bool>!
static Funcky.Functional.Any<T>(params System.Func<T, bool>![]! predicates) -> System.Func<T, bool>!
static Funcky.Functional.Curry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, System.Func<T7, System.Func<T8, TResult>!>!>!>!>!>!>!>!
static Funcky.Functional.Curry<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, System.Func<T7, TResult>!>!>!>!>!>!>!
static Funcky.Functional.Curry<T1, T2, T3, T4, T5, T6, TResult>(System.Func<T1, T2, T3, T4, T5, T6, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, TResult>!>!>!>!>!>!
static Funcky.Functional.Curry<T1, T2, T3, T4, T5, TResult>(System.Func<T1, T2, T3, T4, T5, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, TResult>!>!>!>!>!
static Funcky.Functional.Curry<T1, T2, T3, T4, TResult>(System.Func<T1, T2, T3, T4, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, TResult>!>!>!>!
static Funcky.Functional.Curry<T1, T2, T3, TResult>(System.Func<T1, T2, T3, TResult>! function) -> System.Func<T1, System.Func<T2, System.Func<T3, TResult>!>!>!
static Funcky.Functional.Curry<T1, T2, TResult>(System.Func<T1, T2, TResult>! function) -> System.Func<T1, System.Func<T2, TResult>!>!
static Funcky.Functional.False<T>(T ω) -> bool
static Funcky.Functional.Flip<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>! function) -> System.Func<T2, T1, T3, T4, T5, T6, T7, T8, TResult>!
static Funcky.Functional.Flip<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>! function) -> System.Func<T2, T1, T3, T4, T5, T6, T7, TResult>!
static Funcky.Functional.Flip<T1, T2, T3, T4, T5, T6, TResult>(System.Func<T1, T2, T3, T4, T5, T6, TResult>! function) -> System.Func<T2, T1, T3, T4, T5, T6, TResult>!
static Funcky.Functional.Flip<T1, T2, T3, T4, T5, TResult>(System.Func<T1, T2, T3, T4, T5, TResult>! function) -> System.Func<T2, T1, T3, T4, T5, TResult>!
static Funcky.Functional.Flip<T1, T2, T3, T4, TResult>(System.Func<T1, T2, T3, T4, TResult>! function) -> System.Func<T2, T1, T3, T4, TResult>!
static Funcky.Functional.Flip<T1, T2, T3, TResult>(System.Func<T1, T2, T3, TResult>! function) -> System.Func<T2, T1, T3, TResult>!
static Funcky.Functional.Flip<T1, T2, TResult>(System.Func<T1, T2, TResult>! function) -> System.Func<T2, T1, TResult>!
static Funcky.Functional.Identity<T>(T value) -> T
static Funcky.Functional.NoOperation() -> void
static Funcky.Functional.NoOperation<T1, T2, T3, T4, T5, T6, T7, T8>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) -> void
static Funcky.Functional.NoOperation<T1, T2, T3, T4, T5, T6, T7>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) -> void
static Funcky.Functional.NoOperation<T1, T2, T3, T4, T5, T6>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) -> void
static Funcky.Functional.NoOperation<T1, T2, T3, T4, T5>(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) -> void
static Funcky.Functional.NoOperation<T1, T2, T3, T4>(T1 p1, T2 p2, T3 p3, T4 p4) -> void
static Funcky.Functional.NoOperation<T1, T2, T3>(T1 p1, T2 p2, T3 p3) -> void
static Funcky.Functional.NoOperation<T1, T2>(T1 p1, T2 p2) -> void
static Funcky.Functional.NoOperation<T1>(T1 p1) -> void
static Funcky.Functional.Not<T>(System.Func<T, bool>! predicate) -> System.Func<T, bool>!
static Funcky.Functional.Retry<TResult>(System.Func<Funcky.Monads.Option<TResult>>! producer) -> TResult
static Funcky.Functional.Retry<TResult>(System.Func<Funcky.Monads.Option<TResult>>! producer, Funcky.IRetryPolicy! retryPolicy) -> Funcky.Monads.Option<TResult>
static Funcky.Functional.RetryAsync<TResult>(System.Func<System.Threading.Tasks.Task<Funcky.Monads.Option<TResult>>!>! producer, Funcky.IRetryPolicy! retryPolicy) -> System.Threading.Tasks.Task<Funcky.Monads.Option<TResult>>!
static Funcky.Functional.True<T>(T ω) -> bool
static Funcky.Functional.Uncurry<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, System.Func<T7, System.Func<T8, TResult>!>!>!>!>!>!>!>! function) -> System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>!
static Funcky.Functional.Uncurry<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, System.Func<T7, TResult>!>!>!>!>!>!>! function) -> System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>!
static Funcky.Functional.Uncurry<T1, T2, T3, T4, T5, T6, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, System.Func<T6, TResult>!>!>!>!>!>! function) -> System.Func<T1, T2, T3, T4, T5, T6, TResult>!
static Funcky.Functional.Uncurry<T1, T2, T3, T4, T5, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, System.Func<T5, TResult>!>!>!>!>! function) -> System.Func<T1, T2, T3, T4, T5, TResult>!
static Funcky.Functional.Uncurry<T1, T2, T3, T4, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, System.Func<T4, TResult>!>!>!>! function) -> System.Func<T1, T2, T3, T4, TResult>!
static Funcky.Functional.Uncurry<T1, T2, T3, TResult>(System.Func<T1, System.Func<T2, System.Func<T3, TResult>!>!>! function) -> System.Func<T1, T2, T3, TResult>!
static Funcky.Functional.Uncurry<T1, T2, TResult>(System.Func<T1, System.Func<T2, TResult>!>! function) -> System.Func<T1, T2, TResult>!
static Funcky.Monads.AwaitableOptionExtensions.GetAwaiter(this Funcky.Monads.Option<System.Threading.Tasks.Task!> option) -> System.Runtime.CompilerServices.TaskAwaiter
static Funcky.Monads.AwaitableOptionExtensions.GetAwaiter(this Funcky.Monads.Option<System.Threading.Tasks.ValueTask> option) -> System.Runtime.CompilerServices.ValueTaskAwaiter
static Funcky.Monads.AwaitableOptionExtensions.GetAwaiter<TItem>(this Funcky.Monads.Option<System.Threading.Tasks.Task<TItem>!> option) -> Funcky.Monads.OptionTaskAwaiter<TItem>
static Funcky.Monads.AwaitableOptionExtensions.GetAwaiter<TItem>(this Funcky.Monads.Option<System.Threading.Tasks.ValueTask<TItem>> option) -> Funcky.Monads.OptionValueTaskAwaiter<TItem>
static Funcky.Monads.Either<TLeft, TRight>.Left(TLeft left) -> Funcky.Monads.Either<TLeft, TRight>
static Funcky.Monads.Either<TLeft, TRight>.operator !=(Funcky.Monads.Either<TLeft, TRight> lhs, Funcky.Monads.Either<TLeft, TRight> rhs) -> bool
static Funcky.Monads.Either<TLeft, TRight>.operator ==(Funcky.Monads.Either<TLeft, TRight> lhs, Funcky.Monads.Either<TLeft, TRight> rhs) -> bool
static Funcky.Monads.Either<TLeft, TRight>.Right(TRight right) -> Funcky.Monads.Either<TLeft, TRight>
static Funcky.Monads.LazyExtensions.Select<T, TResult>(this System.Lazy<T>! lazy, System.Func<T, TResult>! selector) -> System.Lazy<TResult>!
static Funcky.Monads.LazyExtensions.SelectMany<T, TA, TResult>(this System.Lazy<T>! lazy, System.Func<T, System.Lazy<TA>!>! selector, System.Func<T, TA, TResult>! resultSelector) -> System.Lazy<TResult>!
static Funcky.Monads.LazyExtensions.SelectMany<T, TResult>(this System.Lazy<T>! lazy, System.Func<T, System.Lazy<TResult>!>! selector) -> System.Lazy<TResult>!
static Funcky.Monads.Option.FromNullable<T>(T? item) -> Funcky.Monads.Option<T!>
static Funcky.Monads.Option.FromNullable<T>(T? item) -> Funcky.Monads.Option<T>
static Funcky.Monads.Option.Some<TItem>(TItem item) -> Funcky.Monads.Option<TItem>
static Funcky.Monads.Option<TItem>.None() -> Funcky.Monads.Option<TItem>
static Funcky.Monads.Option<TItem>.operator !=(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.Option<TItem>.operator <(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.Option<TItem>.operator <=(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.Option<TItem>.operator ==(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.Option<TItem>.operator >(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.Option<TItem>.operator >=(Funcky.Monads.Option<TItem> lhs, Funcky.Monads.Option<TItem> rhs) -> bool
static Funcky.Monads.OptionComparer.Create<TItem>(System.Collections.Generic.IComparer<TItem>! comparer) -> System.Collections.Generic.Comparer<Funcky.Monads.Option<TItem>>!
static Funcky.Monads.OptionComparer<TItem>.Create(System.Comparison<TItem>! comparison) -> System.Collections.Generic.Comparer<Funcky.Monads.Option<TItem>>!
static Funcky.Monads.OptionComparer<TItem>.Default.get -> System.Collections.Generic.Comparer<Funcky.Monads.Option<TItem>>!
static Funcky.Monads.Result.Ok<TValidResult>(TValidResult item) -> Funcky.Monads.Result<TValidResult>
static Funcky.Monads.Result<TValidResult>.Error(System.Exception! item) -> Funcky.Monads.Result<TValidResult>
static Funcky.Monads.Result<TValidResult>.operator !=(Funcky.Monads.Result<TValidResult> lhs, Funcky.Monads.Result<TValidResult> rhs) -> bool
static Funcky.Monads.Result<TValidResult>.operator ==(Funcky.Monads.Result<TValidResult> lhs, Funcky.Monads.Result<TValidResult> rhs) -> bool
static Funcky.Sequence.FromNullable<T>(T? item, Funcky.GenericConstraints.RequireClass<T!>? ω = null) -> System.Collections.Generic.IEnumerable<T!>!
static Funcky.Sequence.FromNullable<T>(T? item, Funcky.GenericConstraints.RequireStruct<T>? ω = null) -> System.Collections.Generic.IEnumerable<T>!
static Funcky.Sequence.Generate<TItem>(TItem seed, System.Func<TItem, Funcky.Monads.Option<TItem>>! next) -> System.Collections.Generic.IEnumerable<TItem>!
static Funcky.Sequence.Generate<TItem>(TItem seed, System.Func<TItem, TItem>! next) -> System.Collections.Generic.IEnumerable<TItem>!
static Funcky.Sequence.Return<TItem>(TItem item) -> System.Collections.Generic.IEnumerable<TItem>!
static Funcky.Unit.operator !=(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.operator <(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.operator <=(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.operator ==(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.operator >(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.operator >=(Funcky.Unit lhs, Funcky.Unit rhs) -> bool
static Funcky.Unit.Value.get -> Funcky.Unit
